<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.open.courier.repository.mapper.DelayMessageMapper">

    <resultMap id="BaseResultMap" type="com.github.open.courier.core.transport.DelayMessage">
        <id column="message_id" property="messageId" jdbcType="VARCHAR"/>
        <result column="topic" property="topic" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="cluster" property="cluster" jdbcType="VARCHAR"/>
        <result column="env" property="env" jdbcType="VARCHAR"/>
        <result column="from_service" property="fromService" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="INTEGER"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="primary_key" property="primaryKey" jdbcType="VARCHAR"/>
        <result column="usage" property="usage" jdbcType="VARCHAR"/>
        <result column="expire_time" property="expireTime" jdbcType="BIGINT"/>
        <result column="retries" property="retries" jdbcType="INTEGER"/>
        <result column="is_preread" property="isPreread" jdbcType="TINYINT"/>
        <result column="is_send" property="isSend" jdbcType="TINYINT"/>
        <result column="start_delive_time" property="startDeliveTime" jdbcType="TIMESTAMP"/>
        <result column="end_delive_time" property="endDeliveTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        message_id, topic, `type`, cluster, env,
        from_service, content, created_at, primary_key, `usage`,
        `retries`, `expire_time`, is_preread, is_send, start_delive_time,
        end_delive_time
    </sql>

    <insert id="insert" parameterType="com.github.open.courier.core.transport.DelayMessage">
        insert into `courier_delay_message` (<include refid="Base_Column_List"/>)
        values (
        #{messageId},
        #{topic},
        #{type},
        #{cluster},
        #{env},
        #{fromService},
        #{content},
        #{createdAt},
        #{primaryKey},
        #{usage},
        #{retries},
        #{expireTime},
        #{isPreread},
        #{isSend},
        #{startDeliveTime},
        #{endDeliveTime}
        )
    </insert>

    <insert id="insertList">
        insert into `courier_delay_message` (<include refid="Base_Column_List"/>)
        values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.messageId},
            #{item.topic},
            #{item.type},
            #{cluster},
            #{env},
            #{item.fromService},
            #{item.content},
            #{item.createdAt},
            #{item.primaryKey},
            #{item.usage},
            #{item.retries},
            #{item.expireTime},
            #{item.isPreread},
            #{item.isSend},
            #{item.startDeliveTime},
            #{item.endDeliveTime}
            )
        </foreach>
    </insert>

    <select id="listNeedPreReadByExpireTimeRange" resultType="com.github.open.courier.core.transport.DelayMessage">
        select
            message_id AS messageId,
            expire_time AS expireTime
        from courier_delay_message
        where is_preread = 0
        and expire_time <![CDATA[ >= ]]> #{startTime}
        and expire_time <![CDATA[ <= ]]> #{endTime}
    </select>

    <update id="updateReadedByIds">
        update courier_delay_message
        set is_preread = 1
        WHERE message_id IN
        <foreach collection="operationCondition.messageIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
        and is_preread = 0
        and expire_time <![CDATA[ >= ]]> #{operationCondition.startTime}
        and expire_time <![CDATA[ <= ]]> #{operationCondition.endTime}
    </update>

    <select id="listNeedSendByMessageIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from courier_delay_message
        where message_id in
        <foreach collection="operationCondition.messageIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
        and is_send = 0
        and expire_time <![CDATA[ >= ]]> #{operationCondition.startTime}
        and expire_time <![CDATA[ <= ]]> #{operationCondition.endTime}
    </select>

    <update id="updateSendedByIds">
        update courier_delay_message
        set is_send = 1,
        start_delive_time = #{operationCondition.startDeliveTime},
        end_delive_time = #{operationCondition.endDeliveTime}
        WHERE message_id IN
        <foreach collection="operationCondition.messageIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
        and is_send = 0
        and expire_time <![CDATA[ >= ]]> #{operationCondition.startTime}
        and expire_time <![CDATA[ <= ]]> #{operationCondition.endTime}
    </update>

    <update id="createTable" parameterType="java.lang.String">
        CREATE TABLE if not exists ${tableName} LIKE courier_delay_message;
    </update>

</mapper>
